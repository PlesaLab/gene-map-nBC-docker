SHELL := /bin/bash

# DO NOT EDIT THIS FILE

#========================================================================
# Makefile for processing FASTQ files with barcodes

# Define Directories
PROJ_DIR := $(shell pwd)
INPUT_DIR := $(PROJ_DIR)/fastq
CONFIG_DIR := $(PROJ_DIR)/config
REF_DIR := $(PROJ_DIR)/refs
SCRIPT_DIR := $(PROJ_DIR)/scripts
OUTPUT_DIR := $(PROJ_DIR)/out
LOG_DIR := $(PROJ_DIR)/logs

# Define Variables (Do NOT change)
BC_INFO_FILE       := merged.sorted_noN_aa
TRANS_FILES        := merged.sorted_noN_aa.csv
SAM_FILES          := merged.sorted

# Define Software
PYTHON := python
BBMAP := bbmap.sh
SAMTOOLS := samtools
MINIMAP := minimap2

# Define Python scripts
BC_PROCESSING := $(SCRIPT_DIR)/barcode_processing.py
SAM_PARSE_SCRIPT := $(SCRIPT_DIR)/parse_sam_script.py
EXTRACT_ALIGN_READS_SCRIPT := $(SCRIPT_DIR)/extract_top_align_reads.py

#========================================================================
# Process every .conf in $(CONFIG_DIR)
CONFIG_FILES := $(wildcard $(CONFIG_DIR)/*.conf)

#========================================================================
# Process all config files
.PHONY: all_samples
all_samples:
	@for cfg in $(CONFIG_FILES); do \
	  name=$$(basename $$cfg); \
	  echo "===== Processing sample $$name ====="; \
	  $(MAKE) CONF=$$name all; \
	done

#========================================================================
# Only require CONF for targets other than 'all_samples'
ifneq ($(MAKECMDGOALS),all_samples)
  ifndef CONF
    $(error Set CONF. Usage: make CONF=R8FRST_1_384-1x.conf all)
  endif

  CONFIG_PATH := $(CONFIG_DIR)/$(CONF)
  ifeq ("$(wildcard $(CONFIG_PATH))","")
    $(error Config file '$(CONFIG_PATH)' not found)
  endif

  include $(CONFIG_PATH)
endif

#========================================================================
# Define the output files

# Strip directory & extension from the single FASTQ
FILEBASE := $(basename $(basename $(notdir $(INPUT_FASTQ))))

# The three barcode‐processing .csv outputs
PROCESSED_BC_FILES := \
    $(OUTPUT_DIR)/$(FILEBASE).bc_stats.csv \
    $(OUTPUT_DIR)/$(FILEBASE).bc_stats_for_starcode.tsv \
    $(OUTPUT_DIR)/$(FILEBASE).bc_list.csv \

# The processed FASTA output
PROCESSED_FASTA := $(OUTPUT_DIR)/$(FILEBASE).fasta

# The output of bbmap.sh
BBMAP_OUTPUT := $(OUTPUT_DIR)/$(FILEBASE).bbmap.merged.sorted.map.sam
BBMAP_UNALIGNED := $(OUTPUT_DIR)/$(FILEBASE).bbmap.merged.sorted.map.unaligned.sam

# The output of minimap2
MINIMAP_OUTPUT := $(OUTPUT_DIR)/$(FILEBASE).minimap.merged.sorted.map.sam
MINIMAP_UNALIGNED := $(OUTPUT_DIR)/$(FILEBASE).minimap.merged.sorted.map.unaligned.fastq

# The output of parse_sam_script.py
PARSE_SAM_BBMAP_OUTPUT1 := $(OUTPUT_DIR)/$(FILEBASE).C5seqs_mutID_all.csv
PARSE_SAM_BBMAP_OUTPUT2 := $(OUTPUT_DIR)/$(FILEBASE).C5seqs_mutID_info_all.csv
PARSE_SAM_MINIMAP_OUTPUT1 := $(OUTPUT_DIR)/$(FILEBASE).C5seqs_mutID_all.csv
PARSE_SAM_MINIMAP_OUTPUT2 := $(OUTPUT_DIR)/$(FILEBASE).C5seqs_mutID_info_all.csv

# Ensure intermediate files are not deleted
.SECONDARY: \
$(PROCESSED_BC_FILES) \
$(PROCESSED_FASTA) \
$(BBMAP_OUTPUT) \
$(BBMAP_UNALIGNED) \
$(MINIMAP_OUTPUT) \
$(MINIMAP_UNALIGNED) \
$(PARSE_SAM_BBMAP_OUTPUT1) \
$(PARSE_SAM_BBMAP_OUTPUT2) \
$(PARSE_SAM_MINIMAP_OUTPUT1) \
$(PARSE_SAM_MINIMAP_OUTPUT2)

#========================================================================
# Primary targets
all: prepare process_barcodes run_bbmap run_minimap extract_top_align_reads_bbmap extract_top_align_reads_minimap

# Optional targets (add to all:)
# parse_sam_bbmap parse_sam_minimap

# Declare phony targets
.PHONY: all prepare process_barcodes run_bbmap run_minimap extract_top_align_reads_bbmap extract_top_align_reads_minimap

# Optional phony targets (add to .PHONY:)
# parse_sam_bbmap parse_sam_minimap

# Use secondary expansion for pattern rules
.SECONDEXPANSION:

#========================================================================
# STEP 1: Create Output Directories
prepare:
	mkdir -p $(OUTPUT_DIR) \
	         $(LOG_DIR) \
	         $(OUTPUT_DIR)/counts \
	         $(OUTPUT_DIR)/read_fasta

# STEP 2: Process barcodes from the input FASTQ file
process_barcodes: prepare
	@echo "Processing barcodes from $(INPUT_FASTQ)" \
	  | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log
	@$(PYTHON) $(BC_PROCESSING) \
	  --startsitelength $(startsitelength) \
	  --barcode_length $(barcode_length) \
	  --motif           "$(motif)" \
	  --start_site      "$(start_site)" \
	  --end_site        "$(end_site)" \
	  "$(INPUT_FASTQ)" \
	  "$(OUTPUT_DIR)/$(FILEBASE)" \
	  2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log \
	  || exit 1
	@echo "Barcode processing complete." \
	  | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log

# STEP 3: Run BBMap
run_bbmap: process_barcodes
	@echo "Running BBMap" | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log
	@$(BBMAP) ref=$(REF_GENOME) \
	  in=$(PROCESSED_FASTA) \
	  outm=$(BBMAP_OUTPUT) \
	  outu=$(BBMAP_UNALIGNED) \
	  2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log
	@echo "BBMap completed." | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log

# STEP 4: Run MiniMap
run_minimap: process_barcodes
	@echo "Running MiniMap" | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@$(MINIMAP) -ax map-ont \
	  -o $(MINIMAP_OUTPUT) \
	  $(REF_GENOME) \
	  $(PROCESSED_FASTA) \
	  2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@echo "Extracting unmapped reads" | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@{ \
	  awk 'BEGIN{FS="\t"} \
	      /^@SQ/   { if (!seen[$$2]++) print; next } \
	      /^@/     { print;             next } \
	      { print }' $(MINIMAP_OUTPUT) \
	  | $(SAMTOOLS) fastq -f 4 - > $(MINIMAP_UNALIGNED); \
	} 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@echo "minimap2 completed." | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log

# OPTIONAL: Parse SAM files from BBMap
parse_sam_bbmap: run_bbmap
	@if [ -n "$(PROTEIN_FASTA)" ] && [ -f "$(PROTEIN_FASTA)" ]; then \
	  echo "Parsing BBMap SAM alignments" | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_bbmap.log; \
	  $(PYTHON) $(SAM_PARSE_SCRIPT) \
	    "$(PROTEIN_FASTA)" \
	    "$(ALT_TRANS_OUTPUT)" \
	    "$(BBMAP_OUTPUT)" \
	    "$(OUTPUT_DIR)" \
	    bbmap \
	    2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_bbmap.log; \
	  echo "BBMap SAM parsing completed." | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_bbmap.log; \
	else \
	  echo "Skipping BBMap SAM parsing — no valid PROTEIN_FASTA defined." | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_bbmap.log; \
	fi

# OPTIONAL: Parse SAM files from MiniMap
parse_sam_minimap: run_minimap
	@if [ -n "$(PROTEIN_FASTA)" ] && [ -f "$(PROTEIN_FASTA)" ]; then \
	  echo "Parsing MiniMap SAM alignments" | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_minimap.log; \
	  $(PYTHON) $(SAM_PARSE_SCRIPT) \
	    "$(PROTEIN_FASTA)" \
	    "$(ALT_TRANS_OUTPUT)" \
	    "$(MINIMAP_OUTPUT)" \
	    "$(OUTPUT_DIR)" \
	    minimap \
	    2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_minimap.log; \
	  echo "MiniMap SAM parsing completed." | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_minimap.log; \
	else \
	  echo "Skipping MiniMap SAM parsing — no valid PROTEIN_FASTA defined." | tee -a $(LOG_DIR)/$(FILEBASE).parse_sam_minimap.log; \
	fi

# STEP 5: Extract top aligned reads (from BBMap)
extract_top_align_reads_bbmap: run_bbmap
	@echo "Extracting top aligned reads from BBMap" \
	  | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_bbmap.log
	@$(PYTHON) $(EXTRACT_ALIGN_READS_SCRIPT) \
	  -s "$(BBMAP_OUTPUT)" \
	  -f "$(CONSENSUS_GENE_FASTA)" \
	  -c "$(OUTPUT_DIR)/counts/$(FILEBASE).bbmap.counts.csv" \
	  -o "$(OUTPUT_DIR)/read_fasta/$(FILEBASE)_bbmap" \
	  -t 4 \
	  2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_bbmap.log

# STEP 6: Extract top aligned reads (from MiniMap)
extract_top_align_reads_minimap: run_minimap
	@echo "Extracting top aligned reads from MiniMap" \
	  | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_minimap.log
	@$(PYTHON) $(EXTRACT_ALIGN_READS_SCRIPT) \
	  -s "$(MINIMAP_OUTPUT)" \
	  -f "$(CONSENSUS_GENE_FASTA)" \
	  -c "$(OUTPUT_DIR)/counts/$(FILEBASE).minimap.counts.csv" \
	  -o "$(OUTPUT_DIR)/read_fasta/$(FILEBASE)_minimap" \
	  -t 4 \
	  2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_minimap.log
	@echo "Top aligned reads extraction completed."
