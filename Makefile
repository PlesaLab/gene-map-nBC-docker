SHELL := /bin/bash

# DO NOT EDIT THIS FILE

#========================================================================
# Makefile for processing FASTQ files with barcodes (chunkable mode)

# Define Directories
PROJ_DIR    := $(shell pwd)
INPUT_DIR   := $(PROJ_DIR)/fastq
CONFIG_DIR  := $(PROJ_DIR)/config
REF_DIR     := $(PROJ_DIR)/refs
SCRIPT_DIR  := $(PROJ_DIR)/scripts
OUTPUT_DIR  := $(PROJ_DIR)/out
LOG_DIR     := $(PROJ_DIR)/logs
RMD_DIR   	:= $(PROJ_DIR)/RMD

# Define Variables (Do NOT change)
BC_INFO_FILE := merged.sorted_noN_aa
TRANS_FILES  := merged.sorted_noN_aa.csv
SAM_FILES    := merged.sorted

# Software commands\ nPYTHON   := python
BBMAP    := bbmap.sh
SAMTOOLS := samtools
MINIMAP  := minimap2

# Python scripts
BC_PROCESSING		:= $(SCRIPT_DIR)/barcode_processing.py
SPLIT_SCRIPT		:= $(SCRIPT_DIR)/split_script.py
EXTRACT_ALIGN_READS	:= $(SCRIPT_DIR)/extract_top_align_reads.py
SAM_PARSE_SCRIPT	:= $(SCRIPT_DIR)/parse_sam_script.py

#========================================================================
# Load configs per sample
CONFIG_FILES := $(wildcard $(CONFIG_DIR)/*.conf)

.PHONY: all_samples
all_samples:
	@for cfg in $(CONFIG_FILES); do \
	  name=$$(basename $$cfg); \
	  echo "===== Processing sample $$name ====="; \
	  $(MAKE) CONF=$$name all; \
	done

ifneq ($(MAKECMDGOALS),all_samples)
  ifndef CONF
    $(error Set CONF. Usage: make CONF=<config>.conf all)
  endif
  include $(CONFIG_DIR)/$(CONF)
endif

#========================================================================
# Define outputs based on INPUT_FASTQ from .conf
FILEBASE			:= $(basename $(basename $(notdir $(INPUT_FASTQ))))
OUTPUT_PREFIX		:= $(OUTPUT_DIR)/$(FILEBASE)_chunk_
PROCESSED_FASTA		:= $(OUTPUT_DIR)/$(FILEBASE).fasta
BBMAP_OUTPUT		:= $(OUTPUT_DIR)/$(FILEBASE).bbmap.merged.sam
BBMAP_UNALIGNED		:= $(OUTPUT_DIR)/$(FILEBASE).bbmap.merged.unaligned.sam
MINIMAP_OUTPUT		:= $(OUTPUT_DIR)/$(FILEBASE).minimap.merged.sam
MINIMAP_UNALIGNED	:= $(OUTPUT_DIR)/$(FILEBASE).minimap.merged.unaligned.fastq

# Secondary files not deleted
.SECONDARY: $(PROCESSED_FASTA) $(BBMAP_OUTPUT) $(BBMAP_UNALIGNED) $(MINIMAP_OUTPUT) $(MINIMAP_UNALIGNED)
#========================================================================
# Primary workflow
all: prepare process_barcodes run_bbmap run_minimap extract_top_align_reads_bbmap extract_top_align_reads_minimap

.PHONY: all prepare split_fastq process_barcodes_chunks merge_fasta process_barcodes run_bbmap run_minimap extract_top_align_reads_bbmap extract_top_align_reads_minimap

#========================================================================
# STEP 1: Prep directories
prepare:
	mkdir -p $(OUTPUT_DIR) $(LOG_DIR) $(OUTPUT_DIR)/counts $(OUTPUT_DIR)/read_fasta $(RMD_DIR)

#========================================================================
# STEP 2: Barcode processing (chunked or single-file)
ifeq ($(CHUNK_FASTQ),yes)

# 2A: Split FASTQ
split_fastq: prepare
	@echo "Splitting FASTQ: $(INPUT_FASTQ)"
	@$(PYTHON) $(SPLIT_SCRIPT) $(INPUT_FASTQ) $(OUTPUT_PREFIX)

# 2B: Process barcodes on each chunk
process_barcodes_chunks: split_fastq
	@echo "Processing barcodes on chunked FASTQ"
	@for fq in $(OUTPUT_PREFIX)*.gz; do \
		echo "Processing $$fq"; \
		$(PYTHON) $(BC_PROCESSING) \
		  --startsitelength $(startsitelength) \
		  --barcode_length $(barcode_length) \
		  --motif "$(motif)" \
		  --start_site "$(start_site)" \
		  --end_site "$(end_site)" \
		  "$$fq" "$${fq%.gz}" 2>&1 | tee -a $(LOG_DIR)/$$(basename $${fq%.gz}).bc_processing.log || exit 1; \
	done

# 2C: Merge FASTAs
merge_fasta: process_barcodes_chunks
	@echo "Merging FASTA chunks into $(PROCESSED_FASTA)"
	@cat $(OUTPUT_PREFIX)*.fasta > $(PROCESSED_FASTA)

# Master process_barcodes for chunked
process_barcodes: merge_fasta
	@echo "Barcode processing complete for all chunks"

else
# Single-file processing
process_barcodes: prepare
	@echo "Processing barcodes from $(INPUT_FASTQ)" | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log
	@$(PYTHON) $(BC_PROCESSING) \
	  --startsitelength $(startsitelength) \
	  --barcode_length $(barcode_length) \
	  --motif           "$(motif)" \
	  --start_site      "$(start_site)" \
	  --end_site        "$(end_site)" \
	  "$(INPUT_FASTQ)" "$(OUTPUT_DIR)/$(FILEBASE)" 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log || exit 1
	@echo "Barcode processing complete." | tee -a $(LOG_DIR)/$(FILEBASE).bc_processing.log
endif

#========================================================================
# STEP 3: BBMap
run_bbmap: process_barcodes
	@echo "Running BBMap" | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log
	@$(BBMAP) ref=$(REF_GENOME) in=$(PROCESSED_FASTA) outm=$(BBMAP_OUTPUT) outu=$(BBMAP_UNALIGNED) 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log
	@echo "BBMap completed." | tee -a $(LOG_DIR)/$(FILEBASE).bbmap.log

#========================================================================
# STEP 4: minimap2
run_minimap: process_barcodes
	@echo "Running MiniMap" | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@$(MINIMAP) -ax map-ont --secondary=no -o $(MINIMAP_OUTPUT) $(REF_GENOME) $(PROCESSED_FASTA) 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@echo "Extracting unmapped reads" | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@{ awk 'BEGIN{FS="	"} /^@SQ/ { if (!seen[$$2]++) print; next } /^@/ { print; next } { print }' $(MINIMAP_OUTPUT) | $(SAMTOOLS) fastq -f 4 - > $(MINIMAP_UNALIGNED); } 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log
	@echo "minimap2 completed." | tee -a $(LOG_DIR)/$(FILEBASE).minimap.log

#========================================================================
# STEP 5: Extract reads BBMap
extract_top_align_reads_bbmap: run_bbmap
	@echo "Extracting top aligned reads from BBMap" | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_bbmap.log
	@$(PYTHON) $(EXTRACT_ALIGN_READS) -s "$(BBMAP_OUTPUT)" -f "$(PROCESSED_FASTA)" -c "$(OUTPUT_DIR)/counts/$(FILEBASE).bbmap.counts.csv" -o "$(OUTPUT_DIR)/read_fasta/$(FILEBASE)_bbmap" -t 4 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_bbmap.log

#========================================================================
# STEP 6: Extract reads MiniMap
extract_top_align_reads_minimap: run_minimap
	@echo "Extracting top aligned reads from MiniMap" | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_minimap.log
	@$(PYTHON) $(EXTRACT_ALIGN_READS) -s "$(MINIMAP_OUTPUT)" -f "$(PROCESSED_FASTA)" -c "$(OUTPUT_DIR)/counts/$(FILEBASE).minimap.counts.csv" -o "$(OUTPUT_DIR)/read_fasta/$(FILEBASE)_minimap" -t 4 2>&1 | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_minimap.log
	@echo "Top aligned reads extraction completed." | tee -a $(LOG_DIR)/$(FILEBASE).extract_top_align_reads_minimap.log
